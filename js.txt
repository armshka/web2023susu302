//1.Напишите функцию, которая проверяет, является ли число целым используя побитовые операторы
function isInteger(n) {
  // Проверяем, равна ли дробная часть нулю с использованием побитового И.
  return (n & 1) === 0;
}

// Пример использования:
console.log(isInteger(5)); // false, потому что 5 - не целое число
console.log(isInteger(6)); // true, потому что 6 - целое число


//2.Напишите функцию, которая возвращает массив четных чисел от 2 до 20 включительно
function even() {
  const result = [];
  for (let i = 2; i <= 20; i += 2) {
    result.push(i);
  }
  return result;
}

const evenNumbers = even();
console.log(evenNumbers);

//3.Напишите функцию, считающую сумму чисел до заданного используя цикл
function sumTo(n) {
  let sum = 0;
  for (let i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}

//Пример использования:
const result = recSumTo(5);
console.log(result); // Выводит 15, так как 1 + 2 + 3 + 4 + 5 = 15

//4.Напишите функцию, считающую сумму чисел до заданного используя рекурсию
function recSumTo(n) {
  if (n === 1) {
    return 1; // Базовый случай: сумма числа 1 равна 1.
  } else {
    return n + recSumTo(n - 1); // Рекурсивный случай: сумма числа n равна n плюс сумма числа (n-1).
  }
}

// Пример использования:
const result = recSumTo(5);
console.log(result); // Выводит 15, так как 1 + 2 + 3 + 4 + 5 = 15


//5.Напишите функцию, считающую факториал заданного числа
function factorial(n) {
  if (n < 0) {
    return "Факториал не определен для отрицательных чисел";
  }
  let result = 1;
  for (let i = 1; i <= n; i++) {
    result *= i;
  }
  return result;
}

// Пример использования:
const result = factorial(5);
console.log(result); // Выводит 120, так как 5! = 5 * 4 * 3 * 2 * 1 = 120

//6.Напишите функцию, которая определяет, является ли число двойкой, возведенной в степень
function isBinary(n) {
  // Проверяем, что число положительное и что у него ровно один установленный бит.
  return n > 0 && (n & (n - 1)) === 0;
}

// Пример использования:
console.log(isBinary(2));  // true, так как 2 - степень двойки (2^1)
console.log(isBinary(4));  // true, так как 4 - степень двойки (2^2)
console.log(isBinary(3));  // false, так как 3 не является степенью двойки

//7.Напишите функцию, которая находит N-е число Фибоначчи
function fibonacci(n) {
  if (n <= 0) {
    return "Неверный ввод. N должно быть положительным целым числом.";
  }

  if (n === 1) {
    return 0; // Первое число в последовательности Фибоначчи равно 0.
  }

  let a = 0;
  let b = 1;
  for (let i = 2; i <= n; i++) {
    const temp = a + b;
    a = b;
    b = temp;
  }
  return b;
}

// Пример использования:
console.log(fibonacci(0));  // Выведет сообщение об ошибке
console.log(fibonacci(1));  // Выведет 0
console.log(fibonacci(5));  // Выведет 3, так как пятое число в последовательности Фибоначчи - 3

/**8.Напишите функцию, которая принимает начальное значение и функцию операции
 * и возвращает функцию - выполняющую эту операцию.
 * Если функция операции (operatorFn) не задана - по умолчанию всегда
 * возвращается начальное значение (initialValue)
 * @param initialValue
 * @param operatorFn - (storedValue, newValue) => {operation}
 * @example
 * const sumFn =  getOperationFn(10, (a,b) => a + b);
 * console.log(sumFn(5)) - 15
 * console.log(sumFn(3)) - 18
 */
function getOperationFn(initialValue, operatorFn) {
  // Проверяем, была ли предоставлена функция операции.
  if (operatorFn) {
    // Если функция операции предоставлена, возвращаем функцию,
    // которая применяет операцию к хранимому значению и новому значению.
    return function(newValue) {
      return operatorFn(initialValue, newValue);
    };
  } else {
    // Если функция операции не предоставлена, всегда возвращаем начальное значение.
    return function() {
      return initialValue;
    };
  }
}

// Пример использования
const sumFn = getOperationFn(10, (a, b) => a + b);
console.log(sumFn(5)); // 15
console.log(sumFn(3)); // 18

/**
 * 9.Напишите функцию создания генератора арифметической последовательности.
 * При ее вызове, она возвращает новую функцию генератор - generator().
 * Каждый вызов функции генератора возвращает следующий элемент последовательности.
 * Если начальное значение не передано, то оно равно 0.
 * Если шаг не указан, то по дефолту он равен 1.
 * Генераторов можно создать сколько угодно - они все независимые.
 *
 * @param {number} start - число с которого начинается последовательность
 * @param {number} step  - число шаг последовательности
 * @example
 * const generator = sequence(5, 2);
 * console.log(generator()); // 5
 * console.log(generator()); // 7
 * console.log(generator()); // 9
 */
function sequence(start = 0, step = 1) {
  let currentValue = start;

  // Возвращаем функцию-генератор
  return function() {
    const result = currentValue;
    currentValue += step;
    return result;
  };
}

// Пример использования
const generator = sequence(5, 2);
console.log(generator()); // 5
console.log(generator()); // 7
console.log(generator()); // 9

/**
 * 10.Напишите функцию deepEqual, которая принимает два значения
 * и возвращает true только в том случае, если они имеют одинаковое значение
 * или являются объектами с одинаковыми свойствами,
 * значения которых также равны при сравнении с рекурсивным вызовом deepEqual.
 * Учитывать специфичные объекты(такие как Date, RegExp итп) не обязательно
 *
 * @param {object} firstObject - первый объект
 * @param {object} secondObject - второй объект
 * @returns {boolean} - true если объекты равны(по содержанию) иначе false
 * @example
 * deepEqual({arr: [22, 33], text: 'text'}, {arr: [22, 33], text: 'text'}) // true
 * deepEqual({arr: [22, 33], text: 'text'}, {arr: [22, 3], text: 'text2'}) // false
 */
function deepEqual(firstObject, secondObject) {
  if (firstObject === secondObject) {
    return true;
  }

  if (
    typeof firstObject !== "object" ||
    typeof secondObject !== "object" ||
    firstObject === null ||
    secondObject === null
  ) {
    return false;
  }

  const keys1 = Object.keys(firstObject);
  const keys2 = Object.keys(secondObject);

  if (keys1.length !== keys2.length) {
    return false;
  }

  for (const key of keys1) {
    if (!keys2.includes(key) || !deepEqual(firstObject[key], secondObject[key])) {
      return false;
    }
  }

  return true;
}

// Пример использования
const obj1 = { arr: [22, 33], text: "text" };
const obj2 = { arr: [22, 33], text: "text" };
const obj3 = { arr: [22, 3], text: "text2" };

console.log(deepEqual(obj1, obj2)); // true
console.log(deepEqual(obj1, obj3)); // false
